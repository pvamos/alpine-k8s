---

# Alpine linux Kubernetes join additonal 2 controlplane nodes

- name: Test connection with ping
  ansible.builtin.ping:

- name: Set host variables for c1.pvamos.net
  set_fact:
    fqdnfromip: "{{ c1_fqdn }}"
    hostnamefromip: "{{ c1_hostname }}"
    domainfromip: "{{ c1_domain }}"
    ipv4addr: "{{ c1_ipv4addr }}"
    ipv6addr: "{{ c1_ipv6addr }}"
    ipv6mask: "{{ c1_ipv6mask }}"
    ipv6_defaultgw: "{{ c1_ipv6_defaultgw }}"
    macaddress: "{{ hostvars[inventory_hostname].ansible_default_ipv4.macaddress }}"
    city: "{{ c1_city }}"
  when: hostvars[inventory_hostname].ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) == c1_ipv4addr

- name: Set host variables for c2.pvamos.net
  set_fact:
    fqdnfromip: "{{ c2_fqdn }}"
    hostnamefromip: "{{ c2_hostname }}"
    domainfromip: "{{ c2_domain }}"
    ipv4addr: "{{ c2_ipv4addr }}"
    ipv6addr: "{{ c2_ipv6addr }}"
    ipv6mask: "{{ c2_ipv6mask }}"
    ipv6_defaultgw: "{{ c2_ipv6_defaultgw }}"
    macaddress: "{{ hostvars[inventory_hostname].ansible_default_ipv4.macaddress }}"
    city: "{{ c2_city }}"
  when: hostvars[inventory_hostname].ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) == c2_ipv4addr

- name: Set host variables for c3.pvamos.net
  set_fact:
    fqdnfromip: "{{ c3_fqdn }}"
    hostnamefromip: "{{ c3_hostname }}"
    domainfromip: "{{ c3_domain }}"
    ipv4addr: "{{ c3_ipv4addr }}"
    ipv6addr: "{{ c3_ipv6addr }}"
    ipv6mask: "{{ c3_ipv6mask }}"
    ipv6_defaultgw: "{{ c3_ipv6_defaultgw }}"
    macaddress: "{{ hostvars[inventory_hostname].ansible_default_ipv4.macaddress }}"
    city: "{{ c3_city }}"
  when: hostvars[inventory_hostname].ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) == c3_ipv4addr

- name: Get kubeadm join command with tokens from local file
  ansible.builtin.set_fact:
    kubeadm_join_command: "{{ lookup('file', '/home/p/alpine-k8s/kubeadm-join-command.sh') }}"

- name: Get kubeadm join token from local file
  ansible.builtin.set_fact:
    kubeadm_join_token: "{{ lookup('file', '/home/p/alpine-k8s/kubeadm-join-token') }}"

- name: Get kubeadm join cacert from local file
  ansible.builtin.set_fact:
    kubeadm_join_cacert: "{{ lookup('file', '/home/p/alpine-k8s/kubeadm-join-cacert') }}"

- name: Get kubeadm join cacert from local file
  ansible.builtin.set_fact:
    kubeadm_join_certkey: "{{ lookup('file', '/home/p/alpine-k8s/kubeadm-join-certkey') }}"

- name: Print kubeadm join command with tokens
  ansible.builtin.debug:
    msg: "{{ kubeadm_join_command }}"

- name: Print kubeadm token
  ansible.builtin.debug:
    msg: "{{ kubeadm_join_token }}"

- name: Print kubeadm join cacert
  ansible.builtin.debug:
    msg: "{{ kubeadm_join_cacert }}"

- name: Print kubeadm join certkey
  ansible.builtin.debug:
    msg: "{{ kubeadm_join_certkey }}"

- name: Create /root/kubeadm-config.yaml
  template:
    src: templates/kubeadm-config.yaml.control.j2
    dest: /root/kubeadm-config.yaml

- name: Execute kubeadm join for 2nd and 3rd controlplane nodes
  ansible.builtin.command: kubeadm join --ignore-preflight-errors=NumCPU --config=/root/kubeadm-config.yaml
  environment:
    PATH: '/usr/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin'
  register: kubeadm_join_output

- name: Print kubeadm join output for 2nd and 3rd controlplane nodes
  ansible.builtin.debug:
    var: kubeadm_join_output.stdout_lines


